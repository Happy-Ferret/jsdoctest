{"name":"jsdoctest","tagline":"Run jsdoc examples as doctests.","body":"jsdoctest\r\n=========\r\n[![Build Status](https://travis-ci.org/yamadapc/jsdoctest.svg)](https://travis-ci.org/yamadapc/jsdoctest)\r\n[![Coverage Status](https://coveralls.io/repos/yamadapc/jsdoctest/badge.png)](https://coveralls.io/r/yamadapc/jsdoctest)\r\n[![Stories in Ready](https://badge.waffle.io/yamadapc/jsdoctest.svg?label=ready&title=Ready)](http://waffle.io/yamadapc/jsdoctest)\r\n[![Dependency Status](https://david-dm.org/yamadapc/jsdoctest.svg)](https://david-dm.org/yamadapc/jsdoctest)\r\n[![devDependency Status](https://david-dm.org/yamadapc/jsdoctest/dev-status.svg)](https://david-dm.org/yamadapc/jsdoctest#info=devDependencies)\r\n[![npm downloads](http://img.shields.io/npm/dm/jsdoctest.svg)](https://www.npmjs.org/package/jsdoctest)\r\n[![npm version](http://img.shields.io/npm/v/jsdoctest.svg)](https://www.npmjs.org/package/jsdoctest)\r\n- - -\r\n![demo](/jsdoctest-demo.gif)\r\n\r\nParses [`jsdoc`](http://usejsdoc.org/) `@example` tags from annotated functions\r\nand runs them as if they were doctests.\r\n\r\nInspired by the [doctest](https://docs.python.org/2/library/doctest.html) python\r\nlibrary, as well as its [doctestjs](http://doctestjs.org) javascript\r\nimplementation.\r\n\r\n## Set-up\r\nHere's a two line set-up you can use:\r\n```bash\r\n$ npm i -g jsdoctest && jsdoctest --init\r\nAdding `jsdoctest` script to your package.json...\r\nInstalling `mocha` and `jsdoctest` with npm:\r\n# ... npm doing some work...\r\nYou can now run doctests with `npm run jsdoctest` or `npm test`\r\n```\r\nThis will add sensible defaults to your `package.json` which you can then edit.\r\n\r\n## Test-case Format\r\nExamples need to be valid javascript, followed by a comment with the string\r\n` => ` prefixing the results:\r\n```javascript\r\n/**\r\n * @example\r\n *   returns10()\r\n *   // => 10\r\n *   returns20()\r\n *   // => 20\r\n */\r\n```\r\n\r\nIt doesn't matter if the comment is on the same line or the next one, so the\r\nfollowing is also valid:\r\n```javascript\r\n/**\r\n * @example\r\n *   returns10() // => 10\r\n *   returns20()\r\n *   // => 20\r\n */\r\n```\r\n\r\n**Async test cases** are supported prefixing the expected results with the\r\n` async => ` string and pretending to have the `cb` callback function.\r\n```javascript\r\n/**\r\n * @example\r\n *   takesCallbackAndYields10('here', cb)\r\n *   // async => 10\r\n *   takesCallbackAndYields20('here', cb)\r\n *   // async => 30\r\n */\r\n```\r\n\r\n## Examples\r\nThe [examples](/examples) directory has a couple of examples, which may be\r\nuseful. Better documentation will be added if the project raises in complexity.\r\n\r\n## Usage\r\nThe recommended way of using jsdoctest is to use it\r\n[`mocha`](https://github.com/mochajs/mocha). That is made possible with:\r\n```bash\r\nnpm i mocha jsdoctest\r\nmocha --require jsdoctest <module-name>\r\n```\r\n\r\nThere's also a rudimentary command-line interface, which can be ran with:\r\n```bash\r\nnpm i jsdoctest\r\njsdoctest <module-name>\r\n```\r\n\r\n## Disabling\r\nTo disable running jsdoctests, while still requiring it with `mocha` (I don't\r\nknow why, but you may) you can set the `JSDOCTEST_DISABLE` environment variable\r\nto anything (`JSDOCTEST_DISABLE=true mocha --require...`).\r\n\r\n## License\r\nThis code is licensed under the MIT license for Pedro Tacla Yamada. For more\r\ninformation, please refer to the [LICENSE](/LICENSE) file.\r\n","google":"UA-54450544-1","note":"Don't delete this file! It's used internally to help with page regeneration."}